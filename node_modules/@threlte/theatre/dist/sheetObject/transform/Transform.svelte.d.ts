import type { TransformProps } from './types';
declare class __sveltets_Render<Label extends string | undefined> {
    props(): TransformProps<Label>;
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <Label extends string | undefined>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<Label>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<Label>['props']>, ReturnType<__sveltets_Render<Label>['events']>, ReturnType<__sveltets_Render<Label>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<Label>['bindings']>;
    } & ReturnType<__sveltets_Render<Label>['exports']>;
    <Label extends string | undefined>(internal: unknown, props: ReturnType<__sveltets_Render<Label>['props']> & {}): ReturnType<__sveltets_Render<Label>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Transform: $$IsomorphicComponent;
type Transform<Label extends string | undefined> = InstanceType<typeof Transform<Label>>;
export default Transform;
