import type { IRafDriver, ISequence } from '@theatre/core';
import type { Autoreset, IterationCount, PlaybackDirection, PlaybackRange, SequenceAudioOptions } from './types';
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
type $$__sveltets_2_PropsWithChildren<Props, Slots> = Props & (Slots extends {
    default: any;
} ? Props extends Record<string, never> ? any : {
    children?: any;
} : {});
declare const Sequence: $$__sveltets_2_IsomorphicComponent<$$__sveltets_2_PropsWithChildren<{
    rate?: number;
    range?: PlaybackRange;
    iterationCount?: IterationCount;
    direction?: PlaybackDirection;
    rafDriver?: IRafDriver | undefined;
    audio?: SequenceAudioOptions | undefined;
    autoplay?: boolean;
    autoreset?: Autoreset;
    autopause?: boolean;
    delay?: number;
    sequence?: import("./SequenceController").SequenceController;
    position?: number;
    playing?: boolean;
    length?: number;
    play?: ISequence["play"];
    pause?: ISequence["pause"];
}, {
    default: {
        sequence: import("./SequenceController").SequenceController;
        position: number;
        playing: boolean;
        play: (conf?: {
            iterationCount?: number;
            range?: [from: number, to: number];
            rate?: number;
            direction?: "reverse" | "alternate" | "normal" | "alternateReverse";
            rafDriver?: IRafDriver;
        }) => Promise<boolean>;
        pause: () => void;
    };
}>, {
    [evt: string]: CustomEvent<any>;
}, {
    default: {
        sequence: import("./SequenceController").SequenceController;
        position: number;
        playing: boolean;
        play: (conf?: {
            iterationCount?: number;
            range?: [from: number, to: number];
            rate?: number;
            direction?: "reverse" | "alternate" | "normal" | "alternateReverse";
            rafDriver?: IRafDriver;
        }) => Promise<boolean>;
        pause: () => void;
    };
}, {
    sequence: import("./SequenceController").SequenceController;
    length: number;
    play: ISequence["play"];
    pause: ISequence["pause"];
}, string>;
type Sequence = InstanceType<typeof Sequence>;
export default Sequence;
