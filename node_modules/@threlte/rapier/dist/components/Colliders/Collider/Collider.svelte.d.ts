import type { ColliderProps, MassDef, Shape } from './types';
declare class __sveltets_Render<TShape extends Shape, TMassDef extends MassDef> {
    props(): ColliderProps<TShape, TMassDef>;
    events(): {};
    slots(): {};
    bindings(): "collider";
    exports(): {
        refresh: () => void;
    };
}
interface $$IsomorphicComponent {
    new <TShape extends Shape, TMassDef extends MassDef>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TShape, TMassDef>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TShape, TMassDef>['props']>, ReturnType<__sveltets_Render<TShape, TMassDef>['events']>, ReturnType<__sveltets_Render<TShape, TMassDef>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TShape, TMassDef>['bindings']>;
    } & ReturnType<__sveltets_Render<TShape, TMassDef>['exports']>;
    <TShape extends Shape, TMassDef extends MassDef>(internal: unknown, props: ReturnType<__sveltets_Render<TShape, TMassDef>['props']> & {}): ReturnType<__sveltets_Render<TShape, TMassDef>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any, any>['bindings']>;
}
declare const Collider: $$IsomorphicComponent;
type Collider<TShape extends Shape, TMassDef extends MassDef> = InstanceType<typeof Collider<TShape, TMassDef>>;
export default Collider;
