import type { Align, FlexDirection, Justify, Node, Wrap } from 'yoga-layout';
import * as Yoga from 'yoga-layout';
export type FlexPlane = 'xy' | 'yz' | 'xz';
export type ClassParser = (className: string, props: NodeProps) => NodeProps;
export type Axis = 'x' | 'y' | 'z';
/**
 * This map provides the prop setters as well as the types for the props. The
 * first input of a setter is used as the prop value. The second input is the
 * node to apply the prop to. The value of a prop needs to be a primitive type,
 * so that it can be trivially compared to the previous value. This is used to
 * prevent unnecessary reflows.
 */
export declare const propSetter: {
    alignItems: (align: keyof typeof Align, node: Node) => void;
    alignSelf: (align: keyof typeof Align, node: Node) => void;
    alignContent: (align: keyof typeof Align, node: Node) => void;
    justifyContent: (justify: keyof typeof Justify, node: Node) => void;
    flexDirection: (dir: keyof typeof FlexDirection, node: Node) => void;
    flexWrap: (wrap: keyof typeof Wrap, node: Node) => void;
    flex: (flex: Parameters<Node["setFlex"]>[0], node: Node) => void;
    flexBasis: (basis: Parameters<Node["setFlexBasis"]>[0], node: Node) => void;
    flexGrow: (grow: Parameters<Node["setFlexGrow"]>[0], node: Node) => void;
    flexShrink: (shrink: Parameters<Node["setFlexShrink"]>[0], node: Node) => void;
    height: (height: Parameters<Node["setHeight"]>[0], node: Node) => void;
    width: (width: Parameters<Node["setWidth"]>[0], node: Node) => void;
    maxHeight: (maxHeight: Parameters<Node["setMaxHeight"]>[0], node: Node) => void;
    maxWidth: (maxWidth: Parameters<Node["setMaxWidth"]>[0], node: Node) => void;
    minHeight: (minHeight: Parameters<Node["setMinHeight"]>[0], node: Node) => void;
    minWidth: (minWidth: Parameters<Node["setMinWidth"]>[0], node: Node) => void;
    /** As of now, this won't work since the bounding box is still computed by nodes marked as absolutely positioned  */
    top: (top: Parameters<Node["setPosition"]>[1], node: Node) => void;
    right: (right: Parameters<Node["setPosition"]>[1], node: Node) => void;
    bottom: (bottom: Parameters<Node["setPosition"]>[1], node: Node) => void;
    left: (left: Parameters<Node["setPosition"]>[1], node: Node) => void;
    padding: (padding: Parameters<Node["setPadding"]>[1], node: Node) => void;
    paddingTop: (paddingTop: Parameters<Node["setPadding"]>[1], node: Node) => void;
    paddingRight: (paddingRight: Parameters<Node["setPadding"]>[1], node: Node) => void;
    paddingBottom: (paddingBottom: Parameters<Node["setPadding"]>[1], node: Node) => void;
    paddingLeft: (paddingLeft: Parameters<Node["setPadding"]>[1], node: Node) => void;
    margin: (margin: Parameters<Node["setMargin"]>[1], node: Node) => void;
    marginTop: (marginTop: Parameters<Node["setMargin"]>[1], node: Node) => void;
    marginRight: (marginRight: Parameters<Node["setMargin"]>[1], node: Node) => void;
    marginBottom: (marginBottom: Parameters<Node["setMargin"]>[1], node: Node) => void;
    marginLeft: (marginLeft: Parameters<Node["setMargin"]>[1], node: Node) => void;
    gap: (gap: Parameters<Node["setGap"]>[1], node: Node) => {
        unit: Yoga.Unit;
        value: number;
    };
    gapColumn: (gapColumn: Parameters<Node["setGap"]>[1], node: Node) => {
        unit: Yoga.Unit;
        value: number;
    };
    gapRow: (gapRow: Parameters<Node["setGap"]>[1], node: Node) => {
        unit: Yoga.Unit;
        value: number;
    };
    aspectRatio: (aspectRatio: Parameters<Node["setAspectRatio"]>[0], node: Node) => void;
};
export type NodeProps = {
    [Key in keyof typeof propSetter]?: Parameters<(typeof propSetter)[Key]>[0];
};
export declare const applyNodeProps: (node: Node, props: NodeProps, scaleFactor: number) => void;
